In [1]:
def min_heapify(array,i): 
    left=2*i+1
    right=2*i+2
    length=len(array) - 1
    smallest=i
    if left <= length and array[i] > array[left]:
        smallest=left
    if right <= length and array[smallest] > array[right]:
        smallest =right
    if smallest != i:
        array[i],array[smallest]=array[smallest],array[i]
        min_heapify(array,smallest)
# min_heapify fonksiyonu array ve i parametrelerini alır ve döndürdüğü değer yoktur.Bu fonksiyon dizinin i.indeksindeki sayı 
# ile sağı ve solu arasında kıyaslama yapar. Küçük olan yukarı çıkar büyük olan aşağı iner.
In [2]:
def build_min_heap(array):
    for i in reversed(range(len(array)//2)):
        min_heapify(array,i)
# build_min_heap fonksiyonu array'i parametre olarak alır döndürdüğü değer yoktur.Bu fonksiyon gönderilen dizinin yarısından 
# itibaren min_heapify'a gönderir. min_heap oluşur.
In [3]:
array_1=[8,10,3,4,7,15,1,2,16]
In [4]:
build_min_heap(array_1)
In [5]:
array_1
Out[5]:
[1, 2, 3, 4, 7, 15, 8, 10, 16]
In [6]:
def heapsort(array):
    array=array.copy()
    build_min_heap(array)
    sorted_array=[]
    for _ in range(len(array)):
        array[0],array[-1]=array[-1],array[0] ## dizinin sonu ile başı yer değiştiriyor.
        sorted_array.append(array.pop())
        min_heapify(array,0)
    return sorted_array
# heapsort fonksiyonu parametre olarak array'i alır.Döndürdüğü değer de sorted_array'dir.
# Bu fonksiyonu diziyi küçükten büyüğe sıralar.
In [7]:
array_1 = [8,10,3,4,7,15,1,2,16]
array_2 = heapsort(array_1)
array_1,array_2
Out[7]:
([8, 10, 3, 4, 7, 15, 1, 2, 16], [1, 2, 3, 4, 7, 8, 10, 15, 16])
In [13]:
def insertItemToHeap(my_heap,item):
    length=len(my_heap)
    if length==0 :
        print(" heap bos..")
        my_heap.append(item)
        return my_heap
    else:
        my_heap.append(item) #append verilen sayıyı sondan ekler.
        build_min_heap(my_heap)
    return my_heap
#insert_Heap fonkssiyonu aldığı parametreler my_Heap  ve item'dır.my_Heap dizi, item eklenecek olan sayıdır.Döndürdüğü değer 
# ise item eklendikten sonraki my_Heap dizisidir.
In [14]:
insert=insertItemToHeap(array_2,100)
insert
Out[14]:
[1, 2, 3, 4, 7, 8, 10, 15, 16, 100]
In [15]:
def removeItemFrom(my_Heap):
    length = len(my_Heap)
    if length == 0:
        print("heap bos")
        return
    my_Heap.pop()# pop son elemanı siler.
    return my_Heap
#remove_Heap'in aldığı parametre my_heap dizisidir.Döndürdüğü değer ise sondan bir elemanı silinmiş my_Heap dizisidir.
#Bu fonksiyon sondan elemani siler.
In [16]:
remove=removeItemFrom(array_2)
In [12]:
remove
Out[12]:
[1, 2, 3, 4, 7, 8, 10, 15, 16]